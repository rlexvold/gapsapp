{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/actions/AddFoodActions.js","app/actions/FoodActions.js","app/actions/FoodListActions.js","app/actions/FooterActions.js","app/actions/HomeActions.js","app/actions/NavbarActions.js","app/alt.js","app/components/AddFood.js","app/components/App.js","app/components/Food.js","app/components/FoodList.js","app/components/Footer.js","app/components/Home.js","app/components/Navbar.js","app/main.js","app/routes.js","app/stores/AddFoodStore.js","app/stores/FoodListStore.js","app/stores/FoodStore.js","app/stores/FooterStore.js","app/stores/HomeStore.js","app/stores/NavbarStore.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/process/browser.js","node_modules/warning/browser.js"],"names":[],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*global $ */\nimport alt from '../alt'\n\nclass AddFoodActions {\n    constructor() {\n        this.generateActions('addFoodSuccess', 'addFoodFail', 'updateName', 'updateCategory', 'updatePhase', 'invalidName', 'invalidCategory', 'invalidPhase')\n    }\n\n    addFood(name, category, phase) {\n        $.ajax({\n            type: 'POST',\n            url: '/api/food',\n            data: {\n                name: name,\n                category: category,\n                phase: phase\n            }\n        }).done((data) => {\n            this.actions.addFoodSuccess(data.message)\n        }).fail((jqXhr) => {\n            this.actions.addFoodFail(jqXhr.responseJSON.message)\n        })\n    }\n}\n\nexport default alt.createActions(AddFoodActions)\n","/*global $ */\nimport alt from '../alt'\n\nclass FoodActions {\n    constructor() {\n        this.generateActions('getFoodSuccess', 'getFoodFail')\n    }\n\n    getFood(FoodId) {\n        $.ajax({\n            url: '/api/food?id=' + FoodId\n        }).done((data) => {\n            this.actions.getFoodSuccess(data)\n        }).fail((jqXhr) => {\n            this.actions.getFoodFail(jqXhr)\n        })\n    }\n}\n\nexport default alt.createActions(FoodActions)\n","/*global $ */\nimport alt from '../alt'\nlet log = '../../utils/logger'\n\nclass FoodListActions {\n    constructor() {\n        this.generateActions('getFoodsSuccess', 'getFoodsFail')\n    }\n\n    getFoods(payload) {\n        log.debug('getFoods: ' + payload)\n        let url = '/api/phase'\n        let params = {\n            phase: 7\n        }\n\n        if (payload.phase) {\n            params.phase = payload.phase\n        }\n        if (payload.category) {\n            params.category = payload.category\n        }\n\n        log.debug('Calling url, params', url, params)\n        $.ajax({url: url, data: params}).done((data) => {\n            log.debug('Success getting foods: ', data)\n            this.actions.getFoodsSuccess(data)\n        }).fail((jqXhr) => {\n            this.actions.getFoodsFail(jqXhr)\n        })\n    }\n}\n\nexport default alt.createActions(FoodListActions)\n","import alt from '../alt'\n\nclass FooterActions {\n    constructor() {\n        this.generateActions()\n    }\n}\n\nexport default alt.createActions(FooterActions)\n","import alt from '../alt'\n\nclass HomeActions {\n    constructor() {\n        this.generateActions()\n    }\n}\n\nexport default alt.createActions(HomeActions)\n","/*global $ */\nimport alt from '../alt'\nimport {\n    assign\n} from 'underscore'\n\nclass NavbarActions {\n    constructor() {\n        this.generateActions('updateOnlineUsers', 'updateAjaxAnimation', 'updateSearchQuery', 'getFoodCountSuccess', 'getFoodCountFail', 'findFoodSuccess', 'findFoodFail')\n    }\n\n    findFood(payload) {\n        $.ajax({\n            url: '/api/foods/search',\n            data: {\n                name: payload.searchQuery\n            }\n        }).done((data) => {\n            assign(payload, data)\n            this.actions.findFoodSuccess(payload)\n        }).fail(() => {\n            this.actions.findFoodFail(payload)\n        })\n    }\n\n    getFoodCount() {\n        $.ajax({\n            url: '/api/foodlist/count'\n        }).done((data) => {\n            this.actions.getFoodCountSuccess(data)\n        }).fail((jqXhr) => {\n            this.actions.getFoodCountFail(jqXhr)\n        })\n    }\n}\n\nexport default alt.createActions(NavbarActions)","import Alt from 'alt'\n\nexport default new Alt()","import React from 'react'\nimport AddFoodStore from '../stores/AddFoodStore'\nimport AddFoodActions from '../actions/AddFoodActions'\n\nclass AddFood extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = AddFoodStore.getState()\n        this.onChange = this.onChange.bind(this)\n    }\n\n    componentDidMount() {\n        AddFoodStore.listen(this.onChange)\n    }\n\n    componentWillUnmount() {\n        AddFoodStore.unlisten(this.onChange)\n    }\n\n    onChange(state) {\n        this.setState(state)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n\n        let name = this.state.name.trim()\n        let category = this.state.category\n        let phase = this.state.phase\n\n        if (!name) {\n            AddFoodActions.invalidName()\n            this.refs.nameTextField.focus()\n        }\n\n        if (!category) {\n            AddFoodActions.invalidCategory()\n        }\n\n        if (!phase) {\n            AddFoodActions.invalidPhase()\n        }\n\n        if (name && category && phase) {\n            AddFoodActions.addFood(name, category, phase)\n        }\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <div className='row flipInX animated'>\n                    <div className='col-sm-8'>\n                        <div className='panel panel-default'>\n                            <div className='panel-heading'>Add Food</div>\n                            <div className='panel-body'>\n                                <form onSubmit={this.handleSubmit.bind(this)}>\n                                    <div className={'form-group ' + this.state.nameValidationState}>\n                                        <label className='control-label'>Food Name</label>\n                                        <input type='text' className='form-control' ref='nameTextField' value={this.state.name} onChange={AddFoodActions.updateName} autoFocus/>\n                                        <span className='help-block'>{this.state.helpBlock}</span>\n                                    </div>\n                                    <div className={'form-group ' + this.state.categoryValidationState}>\n                                        <label className='control-label'>Category</label>\n                                        <input type='text' className='form-control' ref='nameTextField' value={this.state.category} onChange={AddFoodActions.updateCategory} autoFocus/>\n                                        <span className='help-block'>{this.state.helpBlock}</span>\n                                    </div>\n                                    <div className={'form-group ' + this.state.phaseValidationState}>\n                                        <div className='radio radio-inline'>\n                                            <input type='radio' name='phase' id='1' value='1' checked={this.state.phase === '1'} onChange={AddFoodActions.updatePhase}/>\n                                            <label htmlFor='1'>GAPS Phase 1</label>\n                                        </div>\n                                        <div className='radio radio-inline'>\n                                            <input type='radio' name='phase' id='2' value='2' checked={this.state.phase === '2'} onChange={AddFoodActions.updatePhase}/>\n                                            <label htmlFor='2'>GAPS Phase 2</label>\n                                        </div>\n                                        <div className='radio radio-inline'>\n                                            <input type='radio' name='phase' id='3' value='3' checked={this.state.phase === '3'} onChange={AddFoodActions.updatePhase}/>\n                                            <label htmlFor='3'>GAPS Phase 3</label>\n                                        </div>\n                                        <div className='radio radio-inline'>\n                                            <input type='radio' name='phase' id='4' value='4' checked={this.state.phase === '4'} onChange={AddFoodActions.updatePhase}/>\n                                            <label htmlFor='4'>GAPS Phase 4</label>\n                                        </div>\n                                        <div className='radio radio-inline'>\n                                            <input type='radio' name='phase' id='5' value='5' checked={this.state.phase === '5'} onChange={AddFoodActions.updatePhase}/>\n                                            <label htmlFor='5'>GAPS Phase 5</label>\n                                        </div>\n                                        <div className='radio radio-inline'>\n                                            <input type='radio' name='phase' id='6' value='6' checked={this.state.phase === '6'} onChange={AddFoodActions.updatePhase}/>\n                                            <label htmlFor='6'>GAPS Phase 6</label>\n                                        </div>\n                                        <div className='radio radio-inline'>\n                                            <input type='radio' name='phase' id='7' value='7' checked={this.state.phase === '7'} onChange={AddFoodActions.updatePhase}/>\n                                            <label htmlFor='7'>GAPS Phase 7</label>\n                                        </div>\n                                    </div>\n                                    <button type='submit' className='btn btn-primary'>Submit</button>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddFood\n","/*eslint no-unused-vars: 0*/\n/*eslint no-undef: 0 */\nimport React from 'react'\nimport Navbar from './Navbar'\nimport Footer from './Footer'\n\nclass App extends React.Component {\n    render() {\n        return (\n      <div>\n        <Navbar history={this.props.history} />\n        {this.props.children}\n        <Footer />\n      </div>\n        )\n    }\n}\n\nexport default App","/*global $ */\n/*eslint no-unused-vars: 0*/\n/*eslint no-undef: 0 */\nimport React from 'react'\nimport FoodStore from '../stores/FoodStore'\nimport FoodActions from '../actions/FoodActions'\n\nclass Food extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = FoodStore.getState()\n        this.onChange = this.onChange.bind(this)\n    }\n\n    componentDidMount() {\n        FoodStore.listen(this.onChange)\n        FoodActions.getFood(this.props.params._id)\n\n        $('.magnific-popup').magnificPopup({\n            type: 'image',\n            mainClass: 'mfp-zoom-in',\n            closeOnContentClick: true,\n            midClick: true,\n            zoom: {\n                enabled: true,\n                duration: 300\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        FoodStore.unlisten(this.onChange)\n        $(document.body).removeClass()\n    }\n\n    componentDidUpdate(prevProps) {\n        // Fetch new charachter data when URL path changes\n        if (prevProps.params.id !== this.props.params._id) {\n            FoodActions.getFood(this.props.params._id)\n        }\n    }\n\n    onChange(state) {\n        this.setState(state)\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <div className='profile-img'>\n                    <a className='magnific-popup' href='https://upload.wikimedia.org/wikipedia/commons/c/c9/-Insert_image_here-.svg'><img src='https://upload.wikimedia.org/wikipedia/commons/c/c9/-Insert_image_here-.svg'/></a>\n                </div>\n                <div className='media-body'>\n                    <small>\n                        Name:\n                        <strong>{this.state.name}</strong>\n                    </small><br/>\n                    <small>\n                        Category:\n                        <strong>{this.state.category}</strong>\n                    </small><br/>\n                    <small>Phase:\n                        <strong>\n                            {this.state.phase}</strong>\n                    </small><br/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Food\n","/*eslint no-unused-vars: 0*/\n/*eslint no-undef: 0 */\nimport React from 'react'\nimport {Link} from 'react-router'\nimport {isEqual} from 'underscore'\nimport FoodListStore from '../stores/FoodListStore'\nimport FoodListActions from '../actions/FoodListActions'\nlet log = '../../utils/logger'\n\nclass FoodList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = FoodListStore.getState()\n        this.onChange = this.onChange.bind(this)\n    }\n\n    componentDidMount() {\n        FoodListActions.getFoods(this.props.params)\n        FoodListStore.listen(this.onChange)\n        log.debug('componentDidMount', this.props.params)\n    }\n\n    componentWillUnmount() {\n        FoodListStore.unlisten(this.onChange)\n    }\n\n    componentDidUpdate(prevProps) {\n        log.debug('componentDidUpdate', this.props.params)\n        if (!isEqual(prevProps.params, this.props.params)) {\n            FoodListActions.getFoods(this.props.params)\n        }\n    }\n\n    onChange(state) {\n        this.setState(state)\n    }\n\n    render() {\n        log.debug('Found: ' + this.state.foods.length + ' foods')\n        let foodList = this.state.foods.map((food, index) => {\n            log.debug('Got a foodlist')\n            return (\n                <div key={food._id} className='list-group-item animated fadeIn'>\n                    <div className='media'>\n                        <span className='position pull-left'>\n                            {index + 1}\n                        </span>\n                        <div className='pull-left thumb-lg'>\n                            <Link to={'/food?_id=' + food._id}>\n                                <img className='media-object' src='https://upload.wikimedia.org/wikipedia/commons/c/c9/-Insert_image_here-.svg'/>\n                            </Link>\n                        </div>\n                        <div className='media-body'>\n                            <small>\n                                Name:\n                                <strong>{food.name}</strong>\n                            </small><br/>\n                            <small>\n                                Category:\n                                <strong>{food.category}</strong>\n                            </small><br/>\n                            <small>Phase:\n                                <strong>\n                                    {food.phase}</strong>\n                            </small><br/>\n                        </div>\n                    </div>\n                </div>\n            )\n        })\n\n        return (\n            <div className='container'>\n                <div className='list-group'>{foodList}</div>\n            </div>\n        )\n    }\n}\n\nexport default FoodList\n","/*eslint no-unused-vars: 0*/\n/*eslint no-undef: 0 */\nimport React from 'react'\nimport {Link} from 'react-router'\nimport FooterStore from '../stores/FooterStore'\nimport FooterActions from '../actions/FooterActions'\n\nclass Footer extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = FooterStore.getState()\n        this.onChange = this.onChange.bind(this)\n    }\n\n    componentDidMount() {\n        FooterStore.listen(this.onChange)\n    }\n\n    componentWillUnmount() {\n        FooterStore.unlisten(this.onChange)\n    }\n\n    onChange(state) {\n        this.setState(state)\n    }\n\n    render() {\n        return (\n            <footer>\n                <div className='container'>\n                    <div className='row'>\n                        <div className='col-sm-5'>\n                            <h3 className='lead'>\n                                <strong>Information</strong>\n                                and\n                                <strong>Copyright</strong>\n                            </h3>\n                            <p>Powered by\n                                <strong>Node.js</strong>,\n                                <strong>MongoDB</strong>\n                                and\n                                <strong>React</strong>\n                                with Flux architecture and server-side rendering.</p>\n                        </div>\n                    </div>\n                </div>\n            </footer>\n        )\n    }\n}\n\nexport default Footer\n","/*eslint no-unused-vars: 0*/\n/*eslint no-undef: 0 */\nimport React from 'react'\nimport {Link} from 'react-router'\nimport HomeStore from '../stores/HomeStore'\nimport HomeActions from '../actions/HomeActions'\nimport {first, without, findWhere} from 'underscore'\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = HomeStore.getState()\n        this.onChange = this.onChange.bind(this)\n    }\n\n    componentDidMount() {\n        HomeStore.listen(this.onChange)\n    }\n\n    componentWillUnmount() {\n        HomeStore.unlisten(this.onChange)\n    }\n\n    onChange(state) {\n        this.setState(state)\n    }\n\n    handleClick(character) {}\n\n    render() {\n        return (\n            <div className='thumbnail fadeInUp animated'>\n                <p>This is home</p>\n            </div>\n        )\n    }\n}\n\nexport default Home\n","/*global $, io */\n/*eslint no-unused-vars: 0*/\n/*eslint no-undef: 0 */\nimport React from 'react'\nimport {Link} from 'react-router'\nimport NavbarStore from '../stores/NavbarStore'\nimport NavbarActions from '../actions/NavbarActions'\n\nclass Navbar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = NavbarStore.getState()\n        this.onChange = this.onChange.bind(this)\n    }\n\n    componentDidMount() {\n        NavbarStore.listen(this.onChange)\n        NavbarActions.getFoodCount()\n\n        let socket = io.connect()\n\n        socket.on('onlineUsers', (data) => {\n            NavbarActions.updateOnlineUsers(data)\n        })\n\n        $(document).ajaxStart(() => {\n            NavbarActions.updateAjaxAnimation('fadeIn')\n        })\n\n        $(document).ajaxComplete(() => {\n            setTimeout(() => {\n                NavbarActions.updateAjaxAnimation('fadeOut')\n            }, 750)\n        })\n    }\n\n    componentWillUnmount() {\n        NavbarStore.unlisten(this.onChange)\n    }\n\n    onChange(state) {\n        this.setState(state)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n\n        let searchQuery = this.state.searchQuery.trim()\n\n        if (searchQuery) {\n            NavbarActions.findFood({searchQuery: searchQuery, searchForm: this.refs.searchForm, history: this.props.history})\n        }\n    }\n\n    render() {\n        return (\n            <nav className='navbar navbar-default navbar-static-top'>\n                <div className='navbar-header'>\n                    <button type='button' className='navbar-toggle collapsed' data-toggle='collapse' data-target='#navbar'>\n                        <span className='sr-only'>Toggle navigation</span>\n                        <span className='icon-bar'></span>\n                        <span className='icon-bar'></span>\n                        <span className='icon-bar'></span>\n                    </button>\n                    <Link to='/' className='navbar-brand'>\n                        <span ref='triangles' className={'triangles animated ' + this.state.ajaxAnimationClass}>\n                            <div className='tri invert'></div>\n                            <div className='tri invert'></div>\n                            <div className='tri'></div>\n                            <div className='tri invert'></div>\n                            <div className='tri invert'></div>\n                            <div className='tri'></div>\n                            <div className='tri invert'></div>\n                            <div className='tri'></div>\n                            <div className='tri invert'></div>\n                        </span>\n                        LifeTech\n                        <span className='badge badge-up badge-danger'>{this.state.onlineUsers}</span>\n                    </Link>\n                </div>\n                <div id='navbar' className='navbar-collapse collapse'>\n                    <form ref='searchForm' className='navbar-form navbar-left animated' onSubmit={this.handleSubmit.bind(this)}>\n                        <div className='input-group'>\n                            <input type='text' className='form-control' placeholder={this.state.totalFoods + ' Foods'} value={this.state.searchQuery} onChange={NavbarActions.updateSearchQuery}/>\n                            <span className='input-group-btn'>\n                                <button className='btn btn-default' onClick={this.handleSubmit.bind(this)}>\n                                    <span className='glyphicon glyphicon-search'></span>\n                                </button>\n                            </span>\n                        </div>\n                    </form>\n                    <ul className='nav navbar-nav'>\n                        <li>\n                            <Link to='/'>Home</Link>\n                        </li>\n                        <li className='dropdown'>\n                            <a href='#' className='dropdown-toggle' data-toggle='dropdown'>Phase\n                                <span className='caret'></span>\n                            </a>\n                            <ul className='dropdown-menu'>\n                                <li>\n                                    <Link to='/phase/1'>GAPS Phase 1</Link>\n                                </li>\n                                <li>\n                                    <Link to='/phase/2'>GAPS Phase 2</Link>\n                                </li>\n                                <li>\n                                    <Link to='/phase/3'>GAPS Phase 3</Link>\n                                </li>\n                                <li>\n                                    <Link to='/phase/4'>GAPS Phase 4</Link>\n                                </li>\n                                <li>\n                                    <Link to='/phase/5'>GAPS Phase 5</Link>\n                                </li>\n                                <li>\n                                    <Link to='/phase/6'>GAPS Phase 6</Link>\n                                </li>\n                                <li>\n                                    <Link to='/phase/7'>GAPS Phase 7</Link>\n                                </li>\n                            </ul>\n                        </li>\n                        <li>\n                            <Link to='/add'>Add</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar\n","/*eslint no-unused-vars: 0*/\n/*eslint no-undef: 0 */\nimport React from 'react'\nimport Router from 'react-router'\nimport ReactDOM from 'react-dom'\nimport createBrowserHistory from 'history/lib/createBrowserHistory'\nimport routes from './routes'\nimport Navbar from './components/Navbar'\n\nlet history = createBrowserHistory()\n\nReactDOM.render(<Router history={history}>{routes}</Router>, document.getElementById('app'))","/*eslint no-unused-vars: 0*/\nimport React from 'react'\nimport {Route} from 'react-router'\nimport App from './components/App'\nimport Home from './components/Home'\nimport FoodList from './components/FoodList'\nimport Food from './components/Food'\nimport AddFood from './components/AddFood'\n\nexport default(\n    <Route component={App}>\n        <Route path='/' component={Home}/>\n        <Route path='/phase/:phase' component={FoodList}/>\n        <Route path='/add' component={AddFood}/>\n        <Route path='/food' component={Food}/>\n    </Route>\n)\n","import alt from '../alt'\nimport AddFoodActions from '../actions/AddFoodActions'\n\nclass AddFoodStore {\n    constructor() {\n        this.bindActions(AddFoodActions)\n        this.name = ''\n        this.category = ''\n        this.phase = 0\n        this.helpBlock = ''\n        this.nameValidationState = ''\n        this.categoryValidationState = ''\n        this.phaseValidationState = ''\n    }\n\n    onAddFoodSuccess(successMessage) {\n        this.nameValidationState = 'has-success'\n        this.helpBlock = successMessage\n    }\n\n    onAddFoodFail(errorMessage) {\n        this.nameValidationState = 'has-error'\n        this.helpBlock = errorMessage\n    }\n\n    onUpdateName(event) {\n        this.name = event.target.value\n        this.nameValidationState = ''\n        this.helpBlock = ''\n    }\n\n    onUpdateCategory(event) {\n        this.category = event.target.value\n        this.categoryValidationState = ''\n    }\n\n    onUpdatePhase(event) {\n        this.phase = event.target.value\n        this.phaseValidationState = ''\n    }\n\n    onInvalidName() {\n        this.nameValidationState = 'has-error'\n        this.helpBlock = 'Please enter a Food name.'\n    }\n\n    onInvalidCategory() {\n        this.categoryValidationState = 'has-error'\n    }\n}\n\nexport default alt.createStore(AddFoodStore)\n","/* global toastr */\nimport alt from '../alt'\nimport FoodListActions from '../actions/FoodListActions'\nlet log = '../../utils/logger'\n\nclass FoodListStore {\n    constructor() {\n        this.bindActions(FoodListActions)\n        this.foods = []\n    }\n\n    getFoodsSuccess(data) {\n        log.debug('onGetCharacterSuccess data:', data)\n        this.foods = data\n    }\n\n    getFoodsFail(jqXhr) {\n        log.debug('onGetCharactersFails')\n        toastr.error(jqXhr.responseJSON.message)\n    }\n}\n\nexport default alt.createStore(FoodListStore)","/*global $, toastr */\n/*eslint no-unused-vars: 0*/\n/*eslint no-undef: 0 */\nimport {assign, contains} from 'underscore'\nimport alt from '../alt'\nimport FoodActions from '../actions/FoodActions'\n\nclass FoodStore {\n    constructor() {\n        this.bindActions(FoodActions)\n        this._id = 0\n        this.name = ''\n        this.category = 0\n        this.phase = ''\n    }\n\n    onGetFoodSuccess(data) {\n        assign(this, data)\n        let localData = localStorage.getItem('foods')\n            ? JSON.parse(localStorage.getItem('foods'))\n            : {}\n        let reports = localData.reports || []\n    }\n\n    onGetFoodFail(jqXhr) {\n        toastr.error(jqXhr.responseJSON.message)\n    }\n\n}\n\nexport default alt.createStore(FoodStore)\n","import alt from '../alt'\nimport FooterActions from '../actions/FooterActions'\n\nclass FooterStore {\n    constructor() {\n        this.bindActions(FooterActions)\n    }\n}\n\nexport default alt.createStore(FooterStore)","/*global toastr */\nimport alt from '../alt'\nimport HomeActions from '../actions/HomeActions'\n\nclass HomeStore {\n    constructor() {\n        this.bindActions(HomeActions)\n        this.foods = []\n    }\n\n    onGetTwoCharactersSuccess(data) {\n        this.foods = data\n    }\n\n    onGetTwoCharactersFail(errorMessage) {\n        toastr.error(errorMessage)\n    }\n\n    onVoteFail(errorMessage) {\n        toastr.error(errorMessage)\n    }\n}\n\nexport default alt.createStore(HomeStore)\n","/*global toastr */\nimport alt from '../alt'\nimport NavbarActions from '../actions/NavbarActions'\n\nclass NavbarStore {\n    constructor() {\n        this.bindActions(NavbarActions)\n        this.totalFoods = 0\n        this.onlineUsers = 0\n        this.searchQuery = ''\n        this.ajaxAnimationClass = ''\n    }\n\n    onFindFoodSuccess(payload) {\n        payload.history.pushState(null, '/foods/' + payload.foodId)\n    }\n\n    onFindFoodFail(payload) {\n        payload.searchForm.classList.add('shake')\n        setTimeout(() => {\n            payload.searchForm.classList.remove('shake')\n        }, 1000)\n    }\n\n    onUpdateOnlineUsers(data) {\n        this.onlineUsers = data.onlineUsers\n    }\n\n    onUpdateAjaxAnimation(className) {\n        this.ajaxAnimationClass = className //fadein or fadeout\n    }\n\n    onUpdateSearchQuery(event) {\n        this.searchQuery = event.target.value\n    }\n\n    onGetFoodCountSuccess(data) {\n        this.totalFoods = data.count\n    }\n\n    onGetFoodCountFail(jqXhr) {\n        toastr.error(jqXhr.responseJSON.message)\n    }\n}\n\nexport default alt.createStore(NavbarStore)\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","/**\n * Indicates that navigation was caused by a call to history.push.\n */\n'use strict';\n\nexports.__esModule = true;\nvar PUSH = 'PUSH';\n\nexports.PUSH = PUSH;\n/**\n * Indicates that navigation was caused by a call to history.replace.\n */\nvar REPLACE = 'REPLACE';\n\nexports.REPLACE = REPLACE;\n/**\n * Indicates that navigation was caused by some other action such\n * as using a browser's back/forward buttons and/or manually manipulating\n * the URL in a browser's location bar. This is the default.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\n * for more information.\n */\nvar POP = 'POP';\n\nexports.POP = POP;\nexports['default'] = {\n  PUSH: PUSH,\n  REPLACE: REPLACE,\n  POP: POP\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0;\n  var isDone = false;\n\n  function done() {\n    isDone = true;\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) return;\n\n    if (currentTurn < turns) {\n      work.call(this, currentTurn++, next, done);\n    } else {\n      done.apply(this, arguments);\n    }\n  }\n\n  next();\n}","/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededError = 'QuotaExceededError';\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}","'use strict';\n\nexports.__esModule = true;\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.getHashPath = getHashPath;\nexports.replaceHashPath = replaceHashPath;\nexports.getWindowPath = getWindowPath;\nexports.go = go;\nexports.getUserConfirmation = getUserConfirmation;\nexports.supportsHistory = supportsHistory;\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\n\nfunction addEventListener(node, event, listener) {\n  if (node.addEventListener) {\n    node.addEventListener(event, listener, false);\n  } else {\n    node.attachEvent('on' + event, listener);\n  }\n}\n\nfunction removeEventListener(node, event, listener) {\n  if (node.removeEventListener) {\n    node.removeEventListener(event, listener, false);\n  } else {\n    node.detachEvent('on' + event, listener);\n  }\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  return window.location.href.split('#')[1] || '';\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\n}\n\nfunction getWindowPath() {\n  return window.location.pathname + window.location.search + window.location.hash;\n}\n\nfunction go(n) {\n  if (n) window.history.go(n);\n}\n\nfunction getUserConfirmation(message, callback) {\n  callback(window.confirm(message));\n}\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  // FIXME: Work around our browser history not working correctly on Chrome\n  // iOS: https://github.com/rackt/react-router/issues/2565\n  if (ua.indexOf('CriOS') !== -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  var ua = navigator.userAgent;\n  return ua.indexOf('Firefox') === -1;\n}","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _Actions = require('./Actions');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _createDOMHistory = require('./createDOMHistory');\n\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve URLs.\n */\nfunction createBrowserHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\n\n  var forceRefresh = options.forceRefresh;\n\n  var isSupported = _DOMUtils.supportsHistory();\n  var useRefresh = !isSupported || forceRefresh;\n\n  function getCurrentLocation(historyState) {\n    historyState = historyState || window.history.state || {};\n\n    var path = _DOMUtils.getWindowPath();\n    var _historyState = historyState;\n    var key = _historyState.key;\n\n    var state = undefined;\n    if (key) {\n      state = _DOMStateStorage.readState(key);\n    } else {\n      state = null;\n      key = history.createKey();\n\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\n    }\n\n    var location = _parsePath2['default'](path);\n\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\n  }\n\n  function startPopStateListener(_ref) {\n    var transitionTo = _ref.transitionTo;\n\n    function popStateListener(event) {\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\n\n      transitionTo(getCurrentLocation(event.state));\n    }\n\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\n\n    return function () {\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\n    };\n  }\n\n  function finishTransition(location) {\n    var basename = location.basename;\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n    var state = location.state;\n    var action = location.action;\n    var key = location.key;\n\n    if (action === _Actions.POP) return; // Nothing to do.\n\n    _DOMStateStorage.saveState(key, state);\n\n    var path = (basename || '') + pathname + search + hash;\n    var historyState = {\n      key: key\n    };\n\n    if (action === _Actions.PUSH) {\n      if (useRefresh) {\n        window.location.href = path;\n        return false; // Prevent location update.\n      } else {\n          window.history.pushState(historyState, null, path);\n        }\n    } else {\n      // REPLACE\n      if (useRefresh) {\n        window.location.replace(path);\n        return false; // Prevent location update.\n      } else {\n          window.history.replaceState(historyState, null, path);\n        }\n    }\n  }\n\n  var history = _createDOMHistory2['default'](_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    finishTransition: finishTransition,\n    saveState: _DOMStateStorage.saveState\n  }));\n\n  var listenerCount = 0,\n      stopPopStateListener = undefined;\n\n  function listenBefore(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listenBefore(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  function listen(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listen(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    history.registerTransitionHook(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    history.unregisterTransitionHook(hook);\n\n    if (--listenerCount === 0) stopPopStateListener();\n  }\n\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen,\n    registerTransitionHook: registerTransitionHook,\n    unregisterTransitionHook: unregisterTransitionHook\n  });\n}\n\nexports['default'] = createBrowserHistory;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _createHistory = require('./createHistory');\n\nvar _createHistory2 = _interopRequireDefault(_createHistory);\n\nfunction createDOMHistory(options) {\n  var history = _createHistory2['default'](_extends({\n    getUserConfirmation: _DOMUtils.getUserConfirmation\n  }, options, {\n    go: _DOMUtils.go\n  }));\n\n  function listen(listener) {\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\n\n    return history.listen(listener);\n  }\n\n  return _extends({}, history, {\n    listen: listen\n  });\n}\n\nexports['default'] = createDOMHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _AsyncUtils = require('./AsyncUtils');\n\nvar _Actions = require('./Actions');\n\nvar _createLocation2 = require('./createLocation');\n\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\n\nvar _runTransitionHook = require('./runTransitionHook');\n\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nvar _deprecate = require('./deprecate');\n\nvar _deprecate2 = _interopRequireDefault(_deprecate);\n\nfunction createRandomKey(length) {\n  return Math.random().toString(36).substr(2, length);\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search &&\n  //a.action === b.action && // Different action !== location change.\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\n}\n\nvar DefaultKeyLength = 6;\n\nfunction createHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var getCurrentLocation = options.getCurrentLocation;\n  var finishTransition = options.finishTransition;\n  var saveState = options.saveState;\n  var go = options.go;\n  var keyLength = options.keyLength;\n  var getUserConfirmation = options.getUserConfirmation;\n\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\n\n  var transitionHooks = [];\n\n  function listenBefore(hook) {\n    transitionHooks.push(hook);\n\n    return function () {\n      transitionHooks = transitionHooks.filter(function (item) {\n        return item !== hook;\n      });\n    };\n  }\n\n  var allKeys = [];\n  var changeListeners = [];\n  var location = undefined;\n\n  function getCurrent() {\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\n      return allKeys.indexOf(pendingLocation.key);\n    } else if (location) {\n      return allKeys.indexOf(location.key);\n    } else {\n      return -1;\n    }\n  }\n\n  function updateLocation(newLocation) {\n    var current = getCurrent();\n\n    location = newLocation;\n\n    if (location.action === _Actions.PUSH) {\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\n    } else if (location.action === _Actions.REPLACE) {\n      allKeys[current] = location.key;\n    }\n\n    changeListeners.forEach(function (listener) {\n      listener(location);\n    });\n  }\n\n  function listen(listener) {\n    changeListeners.push(listener);\n\n    if (location) {\n      listener(location);\n    } else {\n      var _location = getCurrentLocation();\n      allKeys = [_location.key];\n      updateLocation(_location);\n    }\n\n    return function () {\n      changeListeners = changeListeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function confirmTransitionTo(location, callback) {\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\n        if (result != null) {\n          done(result);\n        } else {\n          next();\n        }\n      });\n    }, function (message) {\n      if (getUserConfirmation && typeof message === 'string') {\n        getUserConfirmation(message, function (ok) {\n          callback(ok !== false);\n        });\n      } else {\n        callback(message !== false);\n      }\n    });\n  }\n\n  var pendingLocation = undefined;\n\n  function transitionTo(nextLocation) {\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\n\n    pendingLocation = nextLocation;\n\n    confirmTransitionTo(nextLocation, function (ok) {\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\n\n      if (ok) {\n        // treat PUSH to current path like REPLACE to be consistent with browsers\n        if (nextLocation.action === _Actions.PUSH) {\n          var prevPath = createPath(location);\n          var nextPath = createPath(nextLocation);\n\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\n        }\n\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\n      } else if (location && nextLocation.action === _Actions.POP) {\n        var prevIndex = allKeys.indexOf(location.key);\n        var nextIndex = allKeys.indexOf(nextLocation.key);\n\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\n      }\n    });\n  }\n\n  function push(location) {\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\n  }\n\n  function replace(location) {\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function createKey() {\n    return createRandomKey(keyLength);\n  }\n\n  function createPath(location) {\n    if (location == null || typeof location === 'string') return location;\n\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n\n    var result = pathname;\n\n    if (search) result += search;\n\n    if (hash) result += hash;\n\n    return result;\n  }\n\n  function createHref(location) {\n    return createPath(location);\n  }\n\n  function createLocation(location, action) {\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\n\n    if (typeof action === 'object') {\n      //warning(\n      //  false,\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\n      //  'location descriptor instead'\n      //)\n\n      if (typeof location === 'string') location = _parsePath2['default'](location);\n\n      location = _extends({}, location, { state: action });\n\n      action = key;\n      key = arguments[3] || createKey();\n    }\n\n    return _createLocation3['default'](location, action, key);\n  }\n\n  // deprecated\n  function setState(state) {\n    if (location) {\n      updateLocationState(location, state);\n      updateLocation(location);\n    } else {\n      updateLocationState(getCurrentLocation(), state);\n    }\n  }\n\n  function updateLocationState(location, state) {\n    location.state = _extends({}, location.state, state);\n    saveState(location.key, location.state);\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    transitionHooks = transitionHooks.filter(function (item) {\n      return item !== hook;\n    });\n  }\n\n  // deprecated\n  function pushState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    push(_extends({ state: state }, path));\n  }\n\n  // deprecated\n  function replaceState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    replace(_extends({ state: state }, path));\n  }\n\n  return {\n    listenBefore: listenBefore,\n    listen: listen,\n    transitionTo: transitionTo,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    createKey: createKey,\n    createPath: createPath,\n    createHref: createHref,\n    createLocation: createLocation,\n\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\n  };\n}\n\nexports['default'] = createHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Actions = require('./Actions');\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nfunction createLocation() {\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n  if (typeof location === 'string') location = _parsePath2['default'](location);\n\n  if (typeof action === 'object') {\n    //warning(\n    //  false,\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\n    //  'location descriptor instead'\n    //)\n\n    location = _extends({}, location, { state: action });\n\n    action = key || _Actions.POP;\n    key = _fourthArg;\n  }\n\n  var pathname = location.pathname || '/';\n  var search = location.search || '';\n  var hash = location.hash || '';\n  var state = location.state || null;\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash,\n    state: state,\n    action: action,\n    key: key\n  };\n}\n\nexports['default'] = createLocation;\nmodule.exports = exports['default'];","//import warning from 'warning'\n\n\"use strict\";\n\nexports.__esModule = true;\nfunction deprecate(fn) {\n  return fn;\n  //return function () {\n  //  warning(false, '[history] ' + message)\n  //  return fn.apply(this, arguments)\n  //}\n}\n\nexports[\"default\"] = deprecate;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\nfunction extractPath(string) {\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\n\n  if (match == null) return string;\n\n  return string.substring(match[0].length);\n}\n\nexports[\"default\"] = extractPath;\nmodule.exports = exports[\"default\"];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _extractPath = require('./extractPath');\n\nvar _extractPath2 = _interopRequireDefault(_extractPath);\n\nfunction parsePath(path) {\n  var pathname = _extractPath2['default'](path);\n  var search = '';\n  var hash = '';\n\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex);\n    pathname = pathname.substring(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex);\n    pathname = pathname.substring(0, searchIndex);\n  }\n\n  if (pathname === '') pathname = '/';\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash\n  };\n}\n\nexports['default'] = parsePath;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction runTransitionHook(hook, location, callback) {\n  var result = hook(location, callback);\n\n  if (hook.length < 2) {\n    // Assume the hook runs synchronously and automatically\n    // call the callback with the return value.\n    callback(result);\n  } else {\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\n  }\n}\n\nexports['default'] = runTransitionHook;\nmodule.exports = exports['default'];","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}